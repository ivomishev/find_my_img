{"version":3,"sources":["components/navbar/NavBar.js","components/image-results/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","AppBar_default","title","ImageResults","state","open","currentImg","downloads","views","likes","handleOpen","img","_this","setState","handleClose","imageListContent","_this2","this","images","props","console","log","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primart","Dialog_default","fullScreen","modal","onRequestClose","style","width","Component","Search","searchText","amount","apiUrl","apiKey","onTextChange","e","val","target","value","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","onAmountChange","index","length","className","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","image_results_ImageResults","App","MuiThemeProvider_default","navbar_NavBar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6SAMeA,EAFA,kBAAMC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,MAAM,gLC8FpBC,6MAvFXC,MAAQ,CACJC,MAAM,EACNC,WAAY,GACZC,UAAW,GACXC,MAAO,GACPC,MAAO,MAGXC,WAAa,SAACC,EAAKJ,EAAWC,EAAOC,GACjCG,EAAKC,SAAS,CAAER,MAAM,EACNC,WAAYK,EACZJ,UAAWA,EACXC,MAAOA,EACPC,aAIpBK,YAAc,WACVF,EAAKC,SAAS,CAAER,MAAM,6EAIjB,IAEDU,EAFCC,EAAAC,KAGGC,EAAWD,KAAKE,MAAhBD,OACRE,QAAQC,IAAIH,GAGRH,EADAG,EAEIpB,EAAAC,EAAAC,cAACsB,EAAA,SAAD,CAAUC,KAAM,GACXL,EAAOM,IAAI,SAAAb,GAAG,OACXb,EAAAC,EAAAC,cAACsB,EAAA,SAAD,CACIpB,MAAOS,EAAIc,KACXC,IAAKf,EAAIgB,GACTC,SACI9B,EAAAC,EAAAC,cAAA,kBACOF,EAAAC,EAAAC,cAAA,cAASW,EAAIkB,OAGxBC,WACIhC,EAAAC,EAAAC,cAAC+B,EAAAhC,EAAD,CAAYiC,QAAS,kBAAMhB,EAAKN,WAAWC,EAAIsB,cAAetB,EAAIJ,UAAWI,EAAIH,MAAOG,EAAIF,SACxFX,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CAAQoC,MAAM,YAItBrC,EAAAC,EAAAC,cAAA,OAAKoC,IAAKzB,EAAIsB,cAAeI,IAAI,cAO9B,KAGvB,IAAMC,EAAU,CACZxC,EAAAC,EAAAC,cAACuC,EAAAxC,EAAD,CAAYyC,MAAM,QAAQC,SAAS,EAAMT,QAASf,KAAKH,eAG3D,OACIhB,EAAAC,EAAAC,cAAA,WACKe,EACDjB,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CACI4C,YAAY,EACZL,QAASA,EACTM,OAAO,EACPvC,KAAMY,KAAKb,MAAMC,KACjBwC,eAAgB5B,KAAKH,aAErBhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKoC,IAAKnB,KAAKb,MAAME,WAAY+B,IAAI,GAAGS,MAAO,CAAEC,MAAO,WAE5DjD,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,wBAAkBF,EAAAC,EAAAC,cAAA,SAAIiB,KAAKb,MAAMG,YACpCT,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,oBAAcF,EAAAC,EAAAC,cAAA,SAAIiB,KAAKb,MAAMG,YAChCT,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,oBAAcF,EAAAC,EAAAC,cAAA,SAAIiB,KAAKb,MAAMG,qBA7EzByC,aC6EZC,qNA5EX7C,MAAQ,CACJ8C,WAAY,GACZC,OAAQ,GACRC,OAAQ,0BACRC,OAAQ,qCACRnC,OAAQ,MAGZoC,aAAe,SAACC,GACZ,IAAMC,EAAMD,EAAEE,OAAOC,MACrB9C,EAAKC,SAAL8C,OAAAC,EAAA,EAAAD,CAAA,GACKJ,EAAEE,OAAOI,KAAOL,GAClB,WACa,KAARA,EACA5C,EAAKC,SAAS,CAAEK,OAAQ,KAExB4C,IAAMC,IAAN,GAAAC,OAAapD,EAAKR,MAAMgD,OAAxB,UAAAY,OAAuCpD,EAAKR,MAAMiD,OAAlD,OAAAW,OAA8DpD,EAAKR,MAAM8C,WAAzE,iDAAAc,OACYpD,EAAKR,MAAM+C,OADvB,qBAEKc,KAAK,SAAAC,GAAG,OAAItD,EAAKC,SAAS,CAAEK,OAAQgD,EAAIC,KAAKC,SAC7CC,MAAM,SAAAC,GAAG,OAAIlD,QAAQC,IAAIiD,UAO1CC,eAAiB,SAAChB,EAAGiB,EAAOd,GACxB,IAAMF,EAAM5C,EAAKR,MAAMc,OACvBN,EAAKC,SAAS,CACVsC,OAAQO,GACT,WACoB,IAAfF,EAAIiB,QACJX,IAAMC,IAAN,GAAAC,OAAapD,EAAKR,MAAMgD,OAAxB,UAAAY,OAAuCpD,EAAKR,MAAMiD,OAAlD,OAAAW,OAA8DpD,EAAKR,MAAM8C,WAAzE,qDAAAc,OACgBpD,EAAKR,MAAM+C,OAD3B,qBAEKc,KAAK,SAAAC,GAAG,OAAItD,EAAKC,SAAS,CAAEK,OAAQgD,EAAIC,KAAKC,SAC7CC,MAAM,SAAAC,GAAG,OAAIlD,QAAQC,IAAIiD,gFAMtC,OACIxE,EAAAC,EAAAC,cAAA,OAAK0E,UAAU,iBACX5E,EAAAC,EAAAC,cAAC2E,EAAA5E,EAAD,CACI+C,MAAO,CAAEC,MAAO,OAChBc,KAAK,aACLH,MAAOzC,KAAKb,MAAM8C,WAClB0B,SAAU3D,KAAKqC,aACfuB,kBAAkB,oBAClBC,WAAW,IAEfhF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAK0E,UAAU,eACX5E,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,CACI+C,MAAO,CAAEC,MAAO,QAChBc,KAAK,SACLgB,kBAAkB,SAClBnB,MAAOzC,KAAKb,MAAM+C,OAClByB,SAAU3D,KAAKsD,gBAEfzE,EAAAC,EAAAC,cAACgF,EAAAjF,EAAD,CAAU2D,MAAO,EAAGuB,YAAY,MAChCnF,EAAAC,EAAAC,cAACgF,EAAAjF,EAAD,CAAU2D,MAAO,GAAIuB,YAAY,OACjCnF,EAAAC,EAAAC,cAACgF,EAAAjF,EAAD,CAAU2D,MAAO,GAAIuB,YAAY,OACjCnF,EAAAC,EAAAC,cAACgF,EAAAjF,EAAD,CAAU2D,MAAO,GAAIuB,YAAY,OACjCnF,EAAAC,EAAAC,cAACgF,EAAAjF,EAAD,CAAU2D,MAAO,GAAIuB,YAAY,SAGzCnF,EAAAC,EAAAC,cAAA,WACCiB,KAAKb,MAAMc,OAAOuD,OAAS,EACxB3E,EAAAC,EAAAC,cAACkF,EAAD,CAAchE,OAAQD,KAAKb,MAAMc,SACjC,aAxEC8B,cCQNmC,mLATX,OACErF,EAAAC,EAAAC,cAACoF,EAAArF,EAAD,CAAkB2E,UAAU,QAC1B5E,EAAAC,EAAAC,cAACqF,EAAD,MACAvF,EAAAC,EAAAC,cAACsF,EAAD,cALUtC,aCOEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/F,EAAAC,EAAAC,cAAC8F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.84ceb647.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from 'material-ui/AppBar';\n\n\nconst NavBar = () => <AppBar title=\"Find My Image\"/>\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { GridList, GridTile } from 'material-ui/GridList';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\n\n\nclass ImageResults extends Component {\n\n    state = {\n        open: false,\n        currentImg: '',\n        downloads: '',\n        views: '',\n        likes: ''\n    }\n\n    handleOpen = (img, downloads, views, likes) => {\n        this.setState({ open: true, \n                        currentImg: img, \n                        downloads: downloads,\n                        views: views,\n                        likes \n                    });\n    };\n\n    handleClose = () => {\n        this.setState({ open: false });\n    };\n\n\n    render() {\n\n        let imageListContent;\n        const { images } = this.props;\n        console.log(images)\n\n        if (images) {\n            imageListContent = (\n                <GridList cols={3}>\n                    {images.map(img => (\n                        <GridTile\n                            title={img.tags}\n                            key={img.id}\n                            subtitle={\n                                <span>\n                                    by <strong>{img.user}</strong>\n                                </span>\n                            }\n                            actionIcon={\n                                <IconButton onClick={() => this.handleOpen(img.largeImageURL, img.downloads, img.views, img.likes)}>\n                                    <ZoomIn color=\"white\" />\n                                </IconButton>\n                            }\n                        >\n                            <img src={img.largeImageURL} alt=\"image\" />\n                        </GridTile>\n                    ))}\n                </GridList>\n            )\n        } else {\n            //put spinner\n            imageListContent = null;\n        }\n\n        const actions = [\n            <FlatButton label=\"Close\" primart={true} onClick={this.handleClose} />\n        ]\n\n        return (\n            <div >\n                {imageListContent}\n                <Dialog\n                    fullScreen={true}\n                    actions={actions}\n                    modal={true}\n                    open={this.state.open}\n                    onRequestClose={this.handleClose}\n                >\n                    <div>\n                        <img src={this.state.currentImg} alt=\"\" style={{ width: '100%' }} />\n                    </div>\n                    <p><i>downloads: </i><b>{this.state.downloads}</b></p>\n                    <p><i>likes: </i><b>{this.state.downloads}</b></p>\n                    <p><i>views: </i><b>{this.state.downloads}</b></p>\n                </Dialog>\n            </div>\n        )\n    }\n}\n\nImageResults.propTypes = {\n    images: PropTypes.array.isRequired\n}\n\n\nexport default ImageResults;","import React, { Component } from 'react';\nimport TextField from 'material-ui/TextField';\nimport SelectField from 'material-ui/SelectField';\nimport MenuItem from 'material-ui/MenuItem';\nimport axios from 'axios';\nimport ImageResults from '../image-results/ImageResults';\nimport '../../App.css';\n\nclass Search extends Component {\n\n    state = {\n        searchText: '',\n        amount: 15,\n        apiUrl: 'https://pixabay.com/api',\n        apiKey: '12079421-b44b6f4ed11d9ee65fc07286c',\n        images: []\n    }\n\n    onTextChange = (e) => {\n        const val = e.target.value;\n        this.setState({\n            [e.target.name]: val\n        }, () => {\n            if (val === '') {\n                this.setState({ images: [] })\n            } else {\n                axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo\n                &per_page=${this.state.amount}&safesearch=true`)\n                    .then(res => this.setState({ images: res.data.hits }))\n                    .catch(err => console.log(err))\n            }\n\n        });\n\n    };\n\n    onAmountChange = (e, index, value) => {\n        const val = this.state.images;\n        this.setState({\n            amount: value\n        }, () => {\n            if (val.length !== 0) {\n                axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo\n                    &per_page=${this.state.amount}&safesearch=true`)\n                    .then(res => this.setState({ images: res.data.hits }))\n                    .catch(err => console.log(err))\n            }\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"rootContainer\">\n                <TextField\n                    style={{ width: '50%' }}\n                    name=\"searchText\"\n                    value={this.state.searchText}\n                    onChange={this.onTextChange}\n                    floatingLabelText=\"Search For Images\"\n                    fullWidth={true}\n                />\n                <br />\n                <div className=\"selectField\">\n                    <SelectField\n                        style={{ width: '5rem' }}\n                        name=\"amount\"\n                        floatingLabelText=\"Amount\"\n                        value={this.state.amount}\n                        onChange={this.onAmountChange}\n                    >\n                        <MenuItem value={5} primaryText=\"5\" />\n                        <MenuItem value={10} primaryText=\"10\" />\n                        <MenuItem value={15} primaryText=\"15\" />\n                        <MenuItem value={30} primaryText=\"30\" />\n                        <MenuItem value={50} primaryText=\"50\" />\n                    </SelectField>\n                </div>\n                <br />\n                {this.state.images.length > 0 ? (\n                    <ImageResults images={this.state.images} />\n                ) : null}\n            </div>\n        )\n    }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport NavBar from './components/navbar/NavBar';\nimport Search from './components/search/Search';\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider className=\"my-1\" >\n        <NavBar />\n        <Search />\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}